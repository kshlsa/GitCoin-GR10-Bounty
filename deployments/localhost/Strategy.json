{
  "address": "0x3a622DB2db50f463dF562Dc5F341545A64C580fc",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "Coins",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "ticker",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_usdcAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_usdtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_daiAmount",
          "type": "uint256"
        }
      ],
      "name": "depositStablecoins",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb18f3188baa11f42a6dd7008e6bcb18bd5256e1c936bb968ef6e85730b9dd995",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3a622DB2db50f463dF562Dc5F341545A64C580fc",
    "transactionIndex": 0,
    "gasUsed": "867936",
    "logsBloom": "0x
    "blockHash": "0x587924ae7f07e61c8f8e27b808a55f6a8b369c3b56d37e7df2f9570c2b088a45",
    "transactionHash": "0xb18f3188baa11f42a6dd7008e6bcb18bd5256e1c936bb968ef6e85730b9dd995",
    "logs": [],
    "blockNumber": 15863062,
    "cumulativeGasUsed": "867936",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "092a7769fc6ef1008ccca738452df0ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"Coins\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"ticker\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiAmount\",\"type\":\"uint256\"}],\"name\":\"depositStablecoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Strategy.sol\":\"Strategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/Strategy.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './Vault.sol';\\nimport './interfaces/IAaveLendingPool.sol';\\n\\ncontract Strategy {\\n    address constant internal usdcAddr = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    bytes32 constant internal usdcTicker = 'usdc';\\n    address constant internal usdtAddr = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n    bytes32 constant internal usdtTicker = 'usdt';\\n    address constant internal daiAddr = 0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063;\\n    bytes32 constant internal daiTicker = 'dai';\\n\\n    address constant internal aaveLendingPoollAddr = 0x8dFf5E27EA6b7AC08EbFdf9eB090F32ee9a30fcf;\\n    IAaveLendingPool aaveProtocol;\\n\\n    using SafeERC20 for IERC20;\\n\\n    struct Token {\\n        bytes32 ticker;\\n        IERC20 token;\\n    }\\n\\n    mapping(bytes32 => Token) public Coins;\\n\\n    constructor() {\\n        Coins[usdcTicker] = Token(usdcTicker, IERC20(usdcAddr));\\n        Coins[usdtTicker] = Token(usdtTicker, IERC20(usdtAddr));\\n        Coins[daiTicker] = Token(daiTicker, IERC20(daiAddr));\\n        aaveProtocol = IAaveLendingPool(aaveLendingPoollAddr);\\n    }\\n\\n    function depositStablecoins(uint _usdcAmount, uint _usdtAmount, uint _daiAmount) external returns(uint) {\\n        require(Coins[usdcTicker].token.balanceOf(address(this)) >= _usdcAmount,\\n                'Insufficent balance of the USDC');\\n        require(Coins[usdtTicker].token.balanceOf(address(this)) >= _usdtAmount,\\n                'Insufficent balance of the USDT');\\n        require(Coins[daiTicker].token.balanceOf(address(this)) >= _daiAmount,\\n                'Insufficent balance of the DAI');\\n\\n        Coins[usdcTicker].token.safeApprove(aaveLendingPoollAddr, _usdcAmount);\\n        Coins[usdtTicker].token.safeApprove(aaveLendingPoollAddr, _usdtAmount);\\n        Coins[daiTicker].token.safeApprove(aaveLendingPoollAddr, _daiAmount);\\n\\n        aaveProtocol.deposit(usdcAddr, _usdcAmount, msg.sender, 0);\\n        aaveProtocol.deposit(usdtAddr, _usdtAmount, msg.sender, 0);\\n        aaveProtocol.deposit(daiAddr, _daiAmount, msg.sender, 0);\\n\\n        return 1;\\n    }\\n}\\n\",\"keccak256\":\"0xc28a47482917a3811b7bdf0857f41ee342b164646f9035ed1cced4ce177aa054\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"\",\"keccak256\":\"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\"},\"contracts/interfaces/IAaveLendingPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAaveLendingPool {\\n    function deposit(address asset, uint amount, address onBehalfOf, uint16 referralCode) external;\\n}\\n\",\"keccak256\":\"0x9f0b54f4d7cece2491f3557e6c18eb4a1122b903588bbc5ea724b3d0f2699b88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604080518082018252637573646360e01b808252732791bca1f2de4661ed88a30c99a7a9449aa8417460208084019182526000928352600180825293517fba9dae59fd26a207dddfac5c488b0b296c014d0998b3de0b748702e2f4a8ceb75590517fba9dae59fd26a207dddfac5c488b0b296c014d0998b3de0b748702e2f4a8ceb880546001600160a01b039283166001600160a01b03199182161790915585518087018752631d5cd91d60e21b80825273c2132d05d31c914a87c6611c10748aeb04b58e8f82860190815290865286855290517f4c7c230e479d0efcb4289d42735462eb42b63c4c0768ff7955b513f7e10921c055517f4c7c230e479d0efcb4289d42735462eb42b63c4c0768ff7955b513f7e10921c1805491841691831691909117905585518087019096526264616960e81b808752738f3cf7ad23cd3cadbd9735aff958023239c6a0638785019081529085529490925293517f8381c33be0829de2f8429f3f2e7870db92965facbb6fc5279950edcd3cbef10c5591517f8381c33be0829de2f8429f3f2e7870db92965facbb6fc5279950edcd3cbef10d80549190941690831617909255815416738dff5e27ea6b7ac08ebfdf9eb090f32ee9a30fcf179055610bcc806101e96000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b823154d1461003b578063cd44c37114610064575b600080fd5b61004e610049366004610896565b610085565b60405161005b9190610b5d565b60405180910390f35b610077610072366004610866565b610580565b60405161005b929190610951565b637573646360e01b600090815260016020527fba9dae59fd26a207dddfac5c488b0b296c014d0998b3de0b748702e2f4a8ceb8546040516370a0823160e01b815285916001600160a01b0316906370a08231906100e69030906004016108dd565b60206040518083038186803b1580156100fe57600080fd5b505afa158015610112573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610136919061087e565b101561015d5760405162461bcd60e51b815260040161015490610a86565b60405180910390fd5b631d5cd91d60e21b60005260016020527f4c7c230e479d0efcb4289d42735462eb42b63c4c0768ff7955b513f7e10921c1546040516370a0823160e01b815284916001600160a01b0316906370a08231906101bc9030906004016108dd565b60206040518083038186803b1580156101d457600080fd5b505afa1580156101e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020c919061087e565b101561022a5760405162461bcd60e51b81526004016101549061099b565b6264616960e81b60005260016020527f8381c33be0829de2f8429f3f2e7870db92965facbb6fc5279950edcd3cbef10d546040516370a0823160e01b815283916001600160a01b0316906370a08231906102889030906004016108dd565b60206040518083038186803b1580156102a057600080fd5b505afa1580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d8919061087e565b10156102f65760405162461bcd60e51b815260040161015490610a18565b637573646360e01b60005260016020527fba9dae59fd26a207dddfac5c488b0b296c014d0998b3de0b748702e2f4a8ceb854610350906001600160a01b0316738dff5e27ea6b7ac08ebfdf9eb090f32ee9a30fcf866105a2565b631d5cd91d60e21b60005260016020527f4c7c230e479d0efcb4289d42735462eb42b63c4c0768ff7955b513f7e10921c1546103aa906001600160a01b0316738dff5e27ea6b7ac08ebfdf9eb090f32ee9a30fcf856105a2565b6264616960e81b60005260016020527f8381c33be0829de2f8429f3f2e7870db92965facbb6fc5279950edcd3cbef10d54610403906001600160a01b0316738dff5e27ea6b7ac08ebfdf9eb090f32ee9a30fcf846105a2565b6000805460405163e8eda9df60e01b81526001600160a01b039091169163e8eda9df9161044c91732791bca1f2de4661ed88a30c99a7a9449aa841749189913391600401610924565b600060405180830381600087803b15801561046657600080fd5b505af115801561047a573d6000803e3d6000fd5b50506000805460405163e8eda9df60e01b81526001600160a01b03909116935063e8eda9df92506104c79173c2132d05d31c914a87c6611c10748aeb04b58e8f9188913391600401610924565b600060405180830381600087803b1580156104e157600080fd5b505af11580156104f5573d6000803e3d6000fd5b50506000805460405163e8eda9df60e01b81526001600160a01b03909116935063e8eda9df925061054291738f3cf7ad23cd3cadbd9735aff958023239c6a0639187913391600401610924565b600060405180830381600087803b15801561055c57600080fd5b505af1158015610570573d6000803e3d6000fd5b50505050600190505b9392505050565b600160208190526000918252604090912080549101546001600160a01b031682565b80158061062a5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906105d890309086906004016108f1565b60206040518083038186803b1580156105f057600080fd5b505afa158015610604573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610628919061087e565b155b6106465760405162461bcd60e51b815260040161015490610b07565b61069c8363095ea7b360e01b848460405160240161066592919061090b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526106a1565b505050565b60006106f6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107309092919063ffffffff16565b80519091501561069c57808060200190518101906107149190610846565b61069c5760405162461bcd60e51b815260040161015490610abd565b606061073f8484600085610747565b949350505050565b6060824710156107695760405162461bcd60e51b8152600401610154906109d2565b61077285610807565b61078e5760405162461bcd60e51b815260040161015490610a4f565b600080866001600160a01b031685876040516107aa91906108c1565b60006040518083038185875af1925050503d80600081146107e7576040519150601f19603f3d011682016040523d82523d6000602084013e6107ec565b606091505b50915091506107fc82828661080d565b979650505050505050565b3b151590565b6060831561081c575081610579565b82511561082c5782518084602001fd5b8160405162461bcd60e51b81526004016101549190610968565b600060208284031215610857578081fd5b81518015158114610579578182fd5b600060208284031215610877578081fd5b5035919050565b60006020828403121561088f578081fd5b5051919050565b6000806000606084860312156108aa578182fd5b505081359360208301359350604090920135919050565b600082516108d3818460208701610b66565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b9182526001600160a01b0316602082015260400190565b6000602082528251806020840152610987816040850160208701610b66565b601f01601f19169190910160400192915050565b6020808252601f908201527f496e737566666963656e742062616c616e6365206f6620746865205553445400604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601e908201527f496e737566666963656e742062616c616e6365206f6620746865204441490000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252601f908201527f496e737566666963656e742062616c616e6365206f6620746865205553444300604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b90815260200190565b60005b83811015610b81578181015183820152602001610b69565b83811115610b90576000848401525b5050505056fea2646970667358221220f6a8119ec6edc8c3170ecbbd34c820982b7d68abfceff134827e67581b55aa8264736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063b823154d1461003b578063cd44c37114610064575b600080fd5b61004e610049366004610896565b610085565b60405161005b9190610b5d565b60405180910390f35b610077610072366004610866565b610580565b60405161005b929190610951565b637573646360e01b600090815260016020527fba9dae59fd26a207dddfac5c488b0b296c014d0998b3de0b748702e2f4a8ceb8546040516370a0823160e01b815285916001600160a01b0316906370a08231906100e69030906004016108dd565b60206040518083038186803b1580156100fe57600080fd5b505afa158015610112573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610136919061087e565b101561015d5760405162461bcd60e51b815260040161015490610a86565b60405180910390fd5b631d5cd91d60e21b60005260016020527f4c7c230e479d0efcb4289d42735462eb42b63c4c0768ff7955b513f7e10921c1546040516370a0823160e01b815284916001600160a01b0316906370a08231906101bc9030906004016108dd565b60206040518083038186803b1580156101d457600080fd5b505afa1580156101e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020c919061087e565b101561022a5760405162461bcd60e51b81526004016101549061099b565b6264616960e81b60005260016020527f8381c33be0829de2f8429f3f2e7870db92965facbb6fc5279950edcd3cbef10d546040516370a0823160e01b815283916001600160a01b0316906370a08231906102889030906004016108dd565b60206040518083038186803b1580156102a057600080fd5b505afa1580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d8919061087e565b10156102f65760405162461bcd60e51b815260040161015490610a18565b637573646360e01b60005260016020527fba9dae59fd26a207dddfac5c488b0b296c014d0998b3de0b748702e2f4a8ceb854610350906001600160a01b0316738dff5e27ea6b7ac08ebfdf9eb090f32ee9a30fcf866105a2565b631d5cd91d60e21b60005260016020527f4c7c230e479d0efcb4289d42735462eb42b63c4c0768ff7955b513f7e10921c1546103aa906001600160a01b0316738dff5e27ea6b7ac08ebfdf9eb090f32ee9a30fcf856105a2565b6264616960e81b60005260016020527f8381c33be0829de2f8429f3f2e7870db92965facbb6fc5279950edcd3cbef10d54610403906001600160a01b0316738dff5e27ea6b7ac08ebfdf9eb090f32ee9a30fcf846105a2565b6000805460405163e8eda9df60e01b81526001600160a01b039091169163e8eda9df9161044c91732791bca1f2de4661ed88a30c99a7a9449aa841749189913391600401610924565b600060405180830381600087803b15801561046657600080fd5b505af115801561047a573d6000803e3d6000fd5b50506000805460405163e8eda9df60e01b81526001600160a01b03909116935063e8eda9df92506104c79173c2132d05d31c914a87c6611c10748aeb04b58e8f9188913391600401610924565b600060405180830381600087803b1580156104e157600080fd5b505af11580156104f5573d6000803e3d6000fd5b50506000805460405163e8eda9df60e01b81526001600160a01b03909116935063e8eda9df925061054291738f3cf7ad23cd3cadbd9735aff958023239c6a0639187913391600401610924565b600060405180830381600087803b15801561055c57600080fd5b505af1158015610570573d6000803e3d6000fd5b50505050600190505b9392505050565b600160208190526000918252604090912080549101546001600160a01b031682565b80158061062a5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906105d890309086906004016108f1565b60206040518083038186803b1580156105f057600080fd5b505afa158015610604573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610628919061087e565b155b6106465760405162461bcd60e51b815260040161015490610b07565b61069c8363095ea7b360e01b848460405160240161066592919061090b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526106a1565b505050565b60006106f6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107309092919063ffffffff16565b80519091501561069c57808060200190518101906107149190610846565b61069c5760405162461bcd60e51b815260040161015490610abd565b606061073f8484600085610747565b949350505050565b6060824710156107695760405162461bcd60e51b8152600401610154906109d2565b61077285610807565b61078e5760405162461bcd60e51b815260040161015490610a4f565b600080866001600160a01b031685876040516107aa91906108c1565b60006040518083038185875af1925050503d80600081146107e7576040519150601f19603f3d011682016040523d82523d6000602084013e6107ec565b606091505b50915091506107fc82828661080d565b979650505050505050565b3b151590565b6060831561081c575081610579565b82511561082c5782518084602001fd5b8160405162461bcd60e51b81526004016101549190610968565b600060208284031215610857578081fd5b81518015158114610579578182fd5b600060208284031215610877578081fd5b5035919050565b60006020828403121561088f578081fd5b5051919050565b6000806000606084860312156108aa578182fd5b505081359360208301359350604090920135919050565b600082516108d3818460208701610b66565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b9182526001600160a01b0316602082015260400190565b6000602082528251806020840152610987816040850160208701610b66565b601f01601f19169190910160400192915050565b6020808252601f908201527f496e737566666963656e742062616c616e6365206f6620746865205553445400604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601e908201527f496e737566666963656e742062616c616e6365206f6620746865204441490000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252601f908201527f496e737566666963656e742062616c616e6365206f6620746865205553444300604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b90815260200190565b60005b83811015610b81578181015183820152602001610b69565b83811115610b90576000848401525b5050505056fea2646970667358221220f6a8119ec6edc8c3170ecbbd34c820982b7d68abfceff134827e67581b55aa8264736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 627,
        "contract": "contracts/Strategy.sol:Strategy",
        "label": "aaveProtocol",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAaveLendingPool)820"
      },
      {
        "astId": 642,
        "contract": "contracts/Strategy.sol:Strategy",
        "label": "Coins",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Token)637_storage)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAaveLendingPool)820": {
        "encoding": "inplace",
        "label": "contract IAaveLendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(Token)637_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Strategy.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)637_storage"
      },
      "t_struct(Token)637_storage": {
        "encoding": "inplace",
        "label": "struct Strategy.Token",
        "members": [
          {
            "astId": 633,
            "contract": "contracts/Strategy.sol:Strategy",
            "label": "ticker",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 636,
            "contract": "contracts/Strategy.sol:Strategy",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)77"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}